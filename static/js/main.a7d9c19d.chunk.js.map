{"version":3,"sources":["componentes/Header.js","componentes/Formulario.js","componentes/Error.js","componentes/Clima.js","App.js","serviceWorker.js","index.js"],"names":["Header","props","react_default","a","createElement","className","href","titulo","Formulario","ciudadRef","React","createRef","paisRef","handle","e","preventDefault","respuesta","ciudad","_this","current","value","pais","datosConsulta","onSubmit","this","id","type","ref","htmlFor","defaultValue","vaue","Component","Error","mensaje","Clima","mostrarResultado","_this$props$resultado","resultado","name","weather","main","urlIcono","concat","icon","alt","temp","toFixed","src","temp_max","temp_min","App","state","error","consulta","consultarApi","_this$state$consulta","url","fetch","then","json","datos","setState","catch","console","log","prevProps","prevState","cod","componentes_Error","componentes_Clima","componentes_Header","componentes_Formulario","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a7d9c19d.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Header = (props) =>{\r\n    return(\r\n        <div>\r\n           <nav>\r\n                <div className=\"nav-wrapper light-blue darken-2\">\r\n                    <a className=\"brand-logo\" href=\"#\">{props.titulo}</a>\r\n                </div>\r\n            </nav> \r\n        </div>\r\n        \r\n    )\r\n}\r\nHeader.propTypes = {\r\n    titulo: PropTypes.string.isRequired\r\n}\r\nexport default Header;","import React, {Component} from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nclass Formulario extends Component{\r\n\r\n    ciudadRef = React.createRef(); \r\n    paisRef = React.createRef();\r\n\r\n    handle = e =>{\r\n        e.preventDefault();\r\n\r\n        const respuesta = {\r\n            ciudad: this.ciudadRef.current.value,\r\n            pais: this.paisRef.current.value\r\n        }\r\n\r\n        this.props.datosConsulta(respuesta);\r\n\r\n\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div className=\"contenedor-form\">\r\n                <div className=\"container\">\r\n                    <div className=\"row\">\r\n                        <form onSubmit={this.handle}>\r\n                            <div className=\"input-field col s12 m8 l4 offset-m2\">\r\n                                <input id=\"ciudad\" type=\"text\" ref={this.ciudadRef}/>\r\n                                <label htmlFor=\"ciudad\"> Ciudad: </label>\r\n                            </div>\r\n                            <div className=\"input-field col s12 m8 l4 offset-m2\">\r\n                                <select ref={this.paisRef}>\r\n                                    <option value=\"\" defaultValue>Elige un país</option>\r\n                                    <option vaue=\"AR\">Argentina</option>\r\n                                    <option vaue=\"CO\">Colombia</option>\r\n                                    <option vaue=\"CR\">Costa Rica</option>\r\n                                    <option vaue=\"ES\">España</option>\r\n                                    <option vaue=\"US\">Estados Unidos</option>\r\n                                    <option vaue=\"MX\">México</option>\r\n                                    <option vaue=\"PE\">Perú</option>\r\n                                </select>\r\n                                <label htmlFor=\"pais\"> País: </label>\r\n                            </div>\r\n                            <div className=\"input-field col s12 m8 l4 offset-2 buscador\">\r\n                                <input type=\"submit\" className=\"waves-effect waves-light \r\n                                btn-large yellow accent-4\" value=\"Buscar...\"/>\r\n                            </div>\r\n                        </form>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nFormulario.propTypes = {\r\n    datosConsulta: PropTypes.func.isRequired\r\n}\r\n\r\nexport default Formulario;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Error = props =>{\r\n    return(\r\n        <div className=\"container\">\r\n            <div className=\"row\">\r\n                <div className=\"col s12 m6 offset-m3\">\r\n                    <div className=\"card-panel red darken-4 error\">\r\n                        {props.mensaje}\r\n                    </div>\r\n                </div>      \r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nError.propTypes = {\r\n    mensaje: PropTypes.string.isRequired\r\n}\r\nexport default Error;","import React, {Component} from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nclass Clima extends Component{\r\n\r\n    mostrarResultado = () =>{\r\n        const {name, weather, main} = this.props.resultado;\r\n\r\n        if(!name || !weather || !main){\r\n            return null;\r\n        }\r\n        else{\r\n\r\n            const kelvin = 273.15;\r\n            const urlIcono = `http://openweathermap.org/img/w/${weather[0].icon}.png`;\r\n            const alt = `clima de ${name}`;\r\n\r\n            return(\r\n                <div className=\"row\">\r\n                    <div className=\"resultado col s12 m8 l6 offset-m2 offset-l3\">\r\n                        <div className=\"card-panel light-blue align-center\">\r\n                            <span className=\"white-text\">\r\n                                <h2>Resultado Clima de: {name}</h2>\r\n                                 <p className=\"temperatura\">\r\n                                Actual: {(main.temp - kelvin).toFixed(2)} &deg;C\r\n                                    <img src={urlIcono} alt={alt}/>                                   \r\n                                </p> \r\n                                <p>Max. {(main.temp_max - kelvin).toFixed(2)} &deg;C</p>\r\n                                <p>Min. {(main.temp_min - kelvin).toFixed(2)} &deg;C</p>\r\n                            </span>\r\n                        </div>\r\n                    </div>                    \r\n                </div>\r\n            )\r\n        }\r\n    }\r\n\r\n    render(){\r\n\r\n        return(\r\n            <div className=\"container\">\r\n                {this.mostrarResultado()}\r\n            </div>\r\n        )\r\n    }\r\n}\r\nClima.propTypes = {\r\n    resultado : PropTypes.object.isRequired\r\n}\r\n\r\n\r\nexport default Clima;","import React, {Component} from 'react';\nimport Header from './componentes/Header';\nimport Formulario from './componentes/Formulario';\nimport Error from './componentes/Error';\nimport Clima from './componentes/Clima';\n\nclass App extends Component{\n\n  state = {\n    error:'',\n    consulta:{},\n    resultado:{}\n  }\n\n  componentDidMount(){\n    this.setState({\n      error: false\n    })\n  }\n\n  componentDidUpdate(prevProps, prevState){\n    if(prevState.consulta !== this.state.consulta){\n      this.consultarApi();\n    }    \n  }\n\n  consultarApi = () =>{\n\n    const {ciudad, pais} = this.state.consulta;\n    if(!ciudad || !pais){\n      return null;\n    }\n    \n    const appId = '57eb2ea1cb7021a02dce8edfdb076505';\n    const url = `https://api.openweathermap.org/data/2.5/weather?q=${ciudad},${pais}&appid=${appId}`;\n\n    fetch(url)\n    .then(respuesta =>{\n      return respuesta.json();\n    })\n    .then(datos =>{\n      this.setState({\n        resultado: datos\n      })\n    })\n    .catch(error=>{\n      console.log(error);\n    })\n  }\n\n\n  datosConsulta = respuesta =>{\n    const {ciudad, pais} = respuesta;\n    if(!ciudad || !pais){\n      this.setState({\n        error: true\n      })\n    }\n    else{\n      this.setState({\n        error: false,\n        consulta: respuesta\n      })\n    }\n\n  }\n\n  render(){\n\n    const {error} = this.state,\n          {cod} = this.state.resultado;\n    let resultado;\n    if(error){\n      resultado = <Error mensaje=\"Complete los datos por favor\"/>\n    }\n    else if(cod === \"404\"){\n      resultado = <Error mensaje=\"Ciudad no encontrada\"/>\n    }\n    else{\n      resultado = <Clima resultado = {this.state.resultado}/>\n    }\n    \n    return(\n      <div className=\"app\">\n        <Header titulo=\"Clima\"/>\n        <Formulario datosConsulta={this.datosConsulta}/>\n        {resultado}        \n      </div>\n    )\n  }\n}\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './css/index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}